doctype html
html(lang="en")
  head
    script(type='text/javascript' src='jquery-2.2.0.min.js')
    script(type='text/javascript' src='grid.js')
    link(rel='stylesheet' href='bootstrap.min.css')
    link(rel='stylesheet' href='grid.css')
    link(rel='shortcut icon' href='faviconlocalhost.png' type='image/x-icon')
    title Tile Grid Designer
  body
    div#topBox
      div#loginbox
        if(user!=undefined)
          button#logout.loggedIn Logout
          p.message.loggedIn(name= user) Welcome, #{user}
        else
          label#remember.loggedOut remember me
            input.loggedOut#rememberCheck(type='checkbox' name='remember' style='width:20px')
          input.loggedOut(type="text", name="user", placeholder='username')
          input.loggedOut(type="password", name="password", placeholder='password')
          button#login.loggedOut(value="login") Login
          button.loggedOut(id='addUser') Create User

        div.clearfix

        if(user!=undefined)
          li.label.loggedIn Save As:
          li.loggedIn
            input#savename(type='text')
          li.loggedIn
            button#save Save
        if(user!=undefined)
          button#update.loggedIn update
    div#description
      h2 Tile Grid Designer - build, edit, and save square grid designs. A simple web-app I built to learn nodejs, express, jQuery, mongodb, mongoose, ssl, bcrypt, imageMagick, and Jade.
      p The three probability boxes (each initially set to 0.1) set probabilities for three types of colored tiles. When the grid is drawn('Fill Grid' button is pressed) each tile could flip to the first of the three colors with the probability set by the first box. The second flips each of these tiles' eight neighbors to the second color with the second probability. And the third does the same with the second group's neighbors. The 'at least' box allows setting a minimum number of flipped neighbors. Background and border color can be set as well. Clicking on any tile will flip it to the first color then flip its neighbors according to current field values. While focused on any of the probability inputs, the up and down arrows will edit these numbers and redraw the grid. Pressing enter while focused on a color input will change tiles on that iteration without redrawing the whole grid. The 'randomize' button will pick three random colors and redraw the grid with the rest of the inputs as set by the user. 
      p You can create a username to save grids to the server. You can then save, recall, edit, update, and delete your grids. The 'update' button updates the file as well as the thumbnail dynamically.
    div.clearfix
    div#boxwrapper
    ul#savedList
      if(user!=undefined)
          each grid, i in grids
            li.recall.loggedIn(name=grid.name)
              img.thumbnail(src="images/" + grid.user + '_' + grid.name + "_th.png")
              p=grid.name
              button.delete delete
              a(href="images/" + grid.user + '_' + grid.name + ".png" target="_blank" download='grid.png' ) download
    div.clearfix
    h2#gridName
    if(user == undefined)
      button#can Generate Downloadable Image
      adiv#thumb

    div#controller
      div#buttons1
        button#fillCan fill
        button#randomize(value='random colors') randomize
      div#numberBox
        div#probBox1
          div.prob prob:
          input.prob#prob1(type='text' value='.1')
          input.prob#prob2(type='text' value='.1')
          input.prob#prob3(type='text' value='.1')
        div#colorBox1
          div.color color:
          input.color#color1(type='text' value='red')
          input.color#color2(type='text' value='blue')
          input.color#color3(type='text' value='green')
        div#leastBox1
          div.least#leastLabel at least:
          input.least#least2(type='text' value=0)
          input.least#least3(type='text' value=0)
      div#backgroundBorderBox
        div#backgroundBox
          div.background background:
          input.background#colorBack(type='text', value='white')
        div#borderBox
          div.border border:
          input.border#colorBorder(type='text', value='white')
        div#sizeBox
          div.size size:
          input.size#size(type='text', value=700)
      div#saveBox
        input#savename(type='text', placeholder='name')
        button#save save
